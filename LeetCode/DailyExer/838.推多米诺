n 张多米诺骨牌排成一行，将每张多米诺骨牌垂直竖立。在开始时，同时把一些多米诺骨牌向左或向右推。
每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。
如果一张垂直竖立的多米诺骨牌的两侧同时有多米诺骨牌倒下时，由于受力平衡， 该骨牌仍然保持不变。
就这个问题而言，我们会认为一张正在倒下的多米诺骨牌不会对其它正在倒下或已经倒下的多米诺骨牌施加额外的力。
给你一个字符串 dominoes 表示这一行多米诺骨牌的初始状态，其中：
dominoes[i] = 'L'，表示第 i 张多米诺骨牌被推向左侧，
dominoes[i] = 'R'，表示第 i 张多米诺骨牌被推向右侧，
dominoes[i] = '.'，表示没有推动第 i 张多米诺骨牌。
返回表示最终状态的字符串。

class Solution {
    public String pushDominoes(String dominoes) {
        char[] str=dominoes.toCharArray();
        char left='L';      //左边的指针
        int n=str.length, i=0;

        while(i<n){
            int j=i;
            while(j<n && str[j]=='.'){  //找到连续一段不动的骨牌
                j++;
            }

            char right = j < n ? str[j] : 'R';      //右指针

            if(left == right){      //左右相同，代表着这段都朝left 逐个遍历
                while(i<j){
                    str[i++]=right;
                }
            }else if(left == 'R' && right == 'L'){      //左右为 右 左   则向中间倒 再用双指针 逐个遍历更改
                int k=j-1;                              //左右为 左右 的话，中间的不动，原来的也是原来的字符，不需要改变
                while(i<k){
                    str[i++]='R';
                    str[k--]='L';
                }
            }
            left=right;     //左指针代替右指针  进行下一次
            i=j+1;      
        }
        return new String(str);
    }
}
